h html c css j js:顺序加载，代码分离

position:  relative 相对定位  相对原来的位置进行偏移   
(子绝父相)  absolute 绝对定位  脱离文档流的  
                             可根据最近的已有的定位点进行绝对定位 

float:悬浮 
绝对路径：
       1.服务器中的位置：href="http://www.nipic.com.html"
       2.本地存储的位置：file://d:\web学习\实践\...
相对路径：平常用的路径都是相对路径


      js基础
1、
js是一行一行加载的
html中用什么，js中就用什么
操作属性的方法：
第一种：
   .属性
第二种：
  ['属性']
变量、参数不用加引号
字符串要加引号
style：
    style加样式   加在行间
    style取样式   取在行间
样式优先级：
    *<标签<class<id<行间
window.onload：页面加载完执行！！！！
class在js使用叫classname
行为、样式、结构三者分离（js，css，html）
js中只能对一个属性进行操作（注意数组的使用）
this：当前发生事件的元素
innerHTML：div里面的
2、
js = ECMA（核心）+Dom（一些不兼容)+Bom（完全不兼容）
parseInt（）转化成整型 、取 整  parsefloat（）转化成浮点型
typeof :显示变量类型
isNaN：判断是否为NaN
+：字符串拼接(优先),加法
3、
== 先转换在比较
=== 不转换直接比较
!=    先转换在比较
!== 不转换直接比较
三目：条件?语句一:语句二       类比if-else
continue：本次循环中断
真的：true、非零数字、非空字符串、非空对象
假的：false、零数字、空字符串、空对象、underfined
for in循环
Json：var  json = {a:12,b:5,c:10}  json['a']
4、
arguments：数组，可变参 不定参
css(oDiv,'width') 获取样式
css(oDiv,'width'，200px) 设置样式
取非行间样式：currentStyle(不兼容)
                      getComputedStyle(oDiv,false).width(IE7以下下不兼容)
兼容问题一般用if解决
复合样式:background、border
单一样式:width、height、position
数组：
push：尾部添加
pop：尾部删除
shift：头部删除
unshift：头部添加
splice：删除：splice（起点，长度）
            插入： splice（起点，0，元素.....）
            替换： splice(起点，长度，元素.....)
concat:连接两个数组 Aconcat（B）
join：连接符连接
sort（只认识字符串）：数组排序  sort（function（ ，））
                          定时器
  有返回值 ：
           开启定时器： setInterval(函数名，时间) ：无限次执行
                               setTimeout（函数名，时间）：只执行一次
           关闭定时器：clearInterval(函数名，时间) 
                              clearTimeout（函数名，时间）
   date对象：年getFullYear、月getmonth(月份从零开始)、日getDate、
                    星期getDay、时getgetHours、分getMinutes、秒getSeconds
   charAt（i）:取字符串的某一位；浏览器全兼容
  无缝滚动：
    offsetLeft/Top：获取左边距/上边距
    offsetWidth/Height：盒模型尺寸
                               DOM
浏览器支持情况：
IE      10%
Chrome  60%
firefox      99%
子节点：childNodes  只算第一层的
   文本节点 （纯文本）没有样式style        元素节点
nodeType：节点类型   
    <nodeType = 3  文本节点> <nodeType = 1  文本节点>
children:子节点（只包括元素，不包括文本）
parentNode：父节点
ofesetParent: 作用是获取一个定位的父级
第一个节点：        IE6~IE8    firstChild
         兼容性         高级浏览器上 firstElementChild   
设置参数：.setAttribute(名称，值)
获取参数：.getAttribute(名称)
DOM操作:
        创建元素：createElement()
        appendChild(子节点):给父级添加子节点  (添加在后面)[1、先把元素从原来的父级上删掉2、添加子节点]
        插入元素：insertBefore(子节点，在谁之前)
         删除元素：removeChild(子节点)
        创建文档碎片：createDocumentFragment()基本淘汰了
DOM高级操作:
      tBodies:选出所有的tbody 
       rows：选出所有的tr
       cells：选出所有的td
搜索:
      toLowerCase：忽略大小写搜索
      search:找到并且返回字符串出现的位置，没找到返回-1
      split:字符串切成数组
排序:先找到最小的，放在最后，依次累计（从小到大）
    li不是严格上的数组，不能使用sort方法
表单:提交数据  action  提交到哪里
              onsubmit   提交时发生 
              onreset    重置时发生
                   JS运动
基础：
  运动框架：
    1、在开始运动时，关闭已有定时器
    2、把运动和停止分隔开（if/else）
     Bug：运动不会停止
    透明度（IE  alpha（opacity：30 ） 
           火狐/chorme opacity：0.3）
    用变量存储透明度
   缓冲运动：
      逐渐变慢，直至停止（速度和距离成正比）
      Bug速度取整    在css中‘px’自动取整
          Math.ceil   向上取整
          Math.floor  向下取整 
   匀速运动的停止条件
        匀速运动：距离小于速度
        缓冲运动：两点重合
应用：
   多物体运动框架：
     每个DIV一个定时器
     定时器作为物体的属性
     所有东西都不能共用
   任意值运动框架：
      offset的Bug：
       有边框的Div变宽   用currentStyle代替offset
      Math.round（）四舍五入  去掉小数
中级： 
    链式运动框架：
        运动停止时执行函数
    完美运动框架：json的使用
        多个值同时进行变化
    startMove(iTarget)   运动框架
    startMove(obj,iTarget)多物体
    startMove(obj,attr,iTarget)任意值
    startMove(obj,attr,iTarget,fn)链式
    startMove(obj,json)多值
    startMove(obj,json,fn)完美运动框架
                   JS事件
基础：
  event对象和事件冒泡
    document:包含整个网页   用法：整个页面的使用（全局事件）
    IE下用：event.clientX：横坐标  event.clientY：纵坐标
    火狐下用：ev.clientX：横坐标  ev.clientY：纵坐标
    oEvent=event||ev
    事件流：
       （注意）事件冒泡：阻止冒泡cancelBubble=true
 鼠标事件
      onmousemove:鼠标移动
      clientX、clientY：可视区的坐标（用时记得加上scrollTop） 
 键盘事件
      keyCode：具体的按键 
      onkeydown：按下
      onkeyon：弹起
中级：
  默认行为：浏览器自带行为
    oncontexmenu：有返回值     return  false 阻止默认菜单
  拖拽
高级应用：
  事件绑定
    IE下使用：attachEvent(事件名（加on），函数)
    火狐、chrome下使用：addEventListener(事件名（不加on），函数)
  解除绑定
  事件捕获：
    setCapture：只有IE兼容
                    AJAX基础
什么是服务器：
    网页浏览过程分析
    如何配置自己的服务器（Amp）tomcat
    注意编码格式一致
Ajax
   无刷新获取数据
   异步、同步
   去缓存的办法:url后面加个t
   读取动态数据
  HTTP请求方法：
   get方式：放入url
    get：通过网址
        容量小
        安全性差
        有缓存
    post：不通过网址  
        容量大（2G）
        安全性好一点 
        无缓存  

   ajax编写：
  1.创建Ajax对象  XMLHttpRequest   只兼容非IE6（ActiveXObject）
  2.连接到服务器
  3.发送请求
  4.接受返回值         
           没有定义的变量--报错   没有定义的属性--undefined
         
继承：B.prototype = A.prototype  B继承A


        jquery
1.jquery的书写格式：
         $(funciton{}) 
  jquery不变的宗旨你用什么就选什么；用什么选花钱选  $
   事件的因果关系是怎样的一个格式：
     $('button').click(function(e){})
2.css的修改：
      $('button').click(function(e){
         alert( $('div').css('width'))
});
   单属性获取 css（'要获取的css属性名称'）
   $('button').click(function(e){
          $('div').css('width'，‘1000px')
});
   获取并改变值  css（‘css属性名’，‘修改的值’）
      $('button').click(function(e){
          $('div').css({width：‘1000px'，height：'500px'})
});
   多属性获取 css（{css属性名：‘修改的值’，css属性名2：‘修改的值2’，。。。}）
   注意复合属性  background-color改为backgroundColor
3.选择器（核芯）：
   基础选择器：
        例：<div id = "t"></div>
            $('#t').css('width')
         
   过滤选择器：
        例:  $('ul li:gt(1)').css('width')
             ：gt() 过滤大于制定索引值得所有元素
              $('ul li:lt(1)').css('width')  
            ：lt() 过滤小于制定索引值得所有元素
         不包括本身
   筛选选择器：父子兄
     特点：函数形式
       子代选择器 例: $('ul').click(function(e){
                        $('this').children().css('width'，‘1000px')});
       父代选择器 例: $('li').click(function(e){
                        $('this').parent().css('width'，‘1000px')});
        兄弟选择器 例：$('li').click(function(e){
                        $('this').siblings().css('width'，‘1000px')});
      jquery当中的动画和事件遵循一种叫排队的原理
          解决方法在执行动画之前用stop()函数来清空
4.控制html属性：
  attr（'标签属性名称'，‘所对应的值’）
      animate()动态css  过渡
 


                 vue
雏形：
   一片htm l代码配上json，在new出来vue实例
      new Vue({
		  el:'.box',
		  data:{
			  arr:[{message:'apple'},                              {message:'banana'},{message:'pear'}],
			  json:{a:'apple',b:'banana',c:'pear'}
		      },
		   methods:{
			   show:function(){
				   alert(1);
				   }
		          }
		 });
	  };
常用指令：
    指令：扩展html标签功能、属性
    v-model：一般表单元素（input）双向数据绑定
    循环：v-for="name in arr"  
                {{$index}}
          v-for="name in json"
                {{$index}}
                {{$key}}
    事件：v-on：click="函数"
        显示隐藏 v-show="true/flase"
    事件：v-on:click/mouseover     简写：@click/mouseover  推荐
         
    事件对象：@click="show($event)"
    事件冒泡：阻止冒泡：@click.stop
    默认行为：阻止默认：@contextmenu.prevent
    键盘事件：@keydown   @keyup     $event ev.keycode
       常用键：回车：@keyup.enter
              上下左右：@keyup.up  @keyup.down @keyup.left  @keyup.right
   属性：v-bind  v-bind:src="url"简写：:src="url"推荐
       class用法：
          :class="[red]" red是data里的数据
          :class="[red:true]"true也可以用数据中的
          :class="json"  data:{json:{red:true,blue:flase}}
       style用法：
          :style="[c]" c是data里的数据  注意符合样式用驼峰命名法
          :style="a"  data:{a:{red:true,blue:flase}}
   模板：{{msg}}数据更新模板变化
         {{*msg}}数据只绑定一次
         {{{msg}}}html转意输出
过滤器：系统提供了一些过滤器 
       {{msg|filterA}} uppercase lowercase capitalize
       {{msg|filterA'参数'}}
交互：引入：vue-resource 库
     get 
     post
     jsonp









http基础：
  http头部
  http状态码
  数据